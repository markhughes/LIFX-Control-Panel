name: Smoke Build And Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  smoke-build-mac:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Fix up git URLs
        run: echo -e '[url "https://github.com/"]\n  insteadOf = "git://github.com/"' >> ~/.gitconfig
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: '3.8.x' # Semantic version range syntax or exact version of a Python version
          architecture: 'x64'
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip # This path is specific to Ubuntu
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install swig
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)";
          brew install swig
      - name: Check swig
        run: swig -version
      - name: Install pip and requirements
        run: |
          python -m pip install --upgrade pip
          cat requirements.txt | xargs -n 1 pip install || exit 0
      - name: Install pyinstaller
        run: |
          pip install pyinstaller
      - name: Build Project
        run: |
          cd ./lifx_control_panel
          PYTHONOPTIMIZE=1 pyinstaller build_all.spec
          zip -r lifx_control_panel-mac.zip ./dist/*
          cd ..
      - uses: actions/upload-artifact@v3
        with:
          name: lifx_control_panel-mac
          path: lifx_control_panel/lifx_control_panel-mac.zip

  smoke-build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: '3.8.x' # Semantic version range syntax or exact version of a Python version
          architecture: 'x64'
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip # This path is specific to Ubuntu
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install swig
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          (New-Object System.Net.WebClient).DownloadFile("http://prdownloads.sourceforge.net/swig/swigwin-4.0.1.zip","swigwin-4.0.1.zip");
          Expand-Archive .\swigwin-4.0.1.zip .;
          echo "::add-path::./swigwin-4.0.1"
      - name: Check swig
        run: swig -version
      - name: Install python and deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Build Project
        run: |
          cd ./lifx_control_panel
          set PYTHONOPTIMIZE=1 && pyinstaller build_all.spec
          Compress-Archive -Path .\dist\* -DestinationPath .\lifx_control_panel-windows.zip
          cd ..
      - uses: actions/upload-artifact@v3
        with:
          name: lifx_control_panel-windows
          path: lifx_control_panel/lifx_control_panel-windows.zip

  test-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: '3.8.x' # Semantic version range syntax or exact version of a Python version
          architecture: 'x64'
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip # This path is specific to Ubuntu
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Test Project
        run: |
          git config --global url."https://github.com/".insteadOf git://github.com/
          cat requirements.txt | xargs -n 1 pip install || exit 0
          cat requirements-dev.txt | xargs -n 1 pip install || exit 0
          cd ./lifx_control_panel
          PYTHONPATH=.
          coverage run -m unittest discover test -p "*test*.py"
          coverage report
          coverage xml -o coverage.xml
          cd ..
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./lifx_control_panel/coverage.xml
          flags: unittests

  test-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: '3.8.x' # Semantic version range syntax or exact version of a Python version
          architecture: 'x64'
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip # This path is specific to Ubuntu
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Test Project
        run: |
          git config --global url."https://github.com/".insteadOf git://github.com/
          pip3 install --user -r requirements.txt
          pip3 install --user -r requirements-dev.txt
          cd ./lifx_control_panel
          set PYTHONPATH=.
          coverage run -m unittest discover test -p "*test*.py"
          coverage report
          coverage xml -o coverage.xml
          cd ..
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./lifx_control_panel/coverage.xml
          flags: unittests